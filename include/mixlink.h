/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      mixlink.h
 * 
 * @version   1.0
 *
 * @date      09-10-2025
 *
 * @brief     Headers of the top level of a Linux-based L2 stack for protocol-aware serial-based wireless communications. 
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef MIXLINK_H
#define MIXLINK_H 

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <linux/limits.h>
#include <stdlib.h>
#include <stdbool.h>

#include "mixlinkabi.h"

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
extern "C" {        
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

//!< Suport the callback functions and if they are enabled
typedef struct{
  int8_t (* fn)( void * );
  bool enabled;
} mixlink_callback_t;

//!< Callback interfaces for each external module 
typedef struct{
  void * handle;
  mixlink_callback_t init;
  mixlink_callback_t loop;
  mixlink_callback_t rx;
  mixlink_callback_t tx;
  mixlink_callback_t deinit;
} mixlink_module_t;

//!< Device identification if it is a NIC it is only represented by its name. If it is a serial port it uses the 3 parameters.
typedef struct{
  char name[NAME_MAX];                                                         //!< Device name e.g., eth0  
  char device[NAME_MAX];                                                       //!< Device path e.g., /dev/ttyUSB0
  char driver[NAME_MAX];                                                       //!< Device driver e.g., libe22900t22s.so
} mixlink_param_dev_t;

//!< Controller application, dynamic libraries path.
typedef struct{
  struct{
    struct{
      mixlink_param_dev_t tx;                                                  //!< Indicate a simplex path from the translator pipeline to the serial port output specified only, note it can not be the same as rx
      mixlink_param_dev_t rx;                                                  //!< Indicate a simplex path from the translator pipeline to the serial port input specified only, note it can not be the same as tx
    } pair;
    mixlink_param_dev_t def;                                                   //!< Indicate a duplex path from the translator pipeline to the serial port specified
  } dev;

  char qos[NAME_MAX];                                                          //!< The Quality of Service (QoS) dynamic library path, e.g., libslidewindow.so
  char framer[NAME_MAX];                                                       //!< The Framer L1 dynamic library path, e.g., libcobs.so, it can be the same the translator
  char segm[NAME_MAX];                                                         //!< The Segmenter used for L1.
} mixlink_param_controller_t;

//!< Translator application, dynamic libraries path.
typedef struct{
  struct{
    struct{
      mixlink_param_dev_t tx;                                                  //!< Indicate a simplex path from the controller pipeline to the NIC specified, note it can not be the same as rx
      mixlink_param_dev_t rx;                                                  //!< Indicate a simplex path from the controller pipeline to the NIC specified, note it can not be the same as tx
    } pair;
    mixlink_param_dev_t def;                                                   //!< Indicate a duplex path from the controller pipeline to the NIC specified
  } nic;

  char opt[NAME_MAX];                                                          //!< The overhead Optimizer (opt) dynamic library path, e.g., libtcpopt.so
  char framer[NAME_MAX];                                                       //!< The Framer L2 dynamic library path, e.g., libcbos.so, it can be the same the controller
} mixlink_param_translator_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Lookup tables
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

enum direction{
  MIXLINK_DIRECTION_FROM_NIC = 0,
  MIXLINK_DIRECTION_TO_NIC,
};

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Macros
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#define error_print( txt, ... )                               \
  fprintf(                                                    \
    stderr,                                                   \
    "Error: " txt ", at line %d in file %s, errno: %d, %s\n", \
    ##__VA_ARGS__,                                            \
    __LINE__,                                                 \
    __FILE__,                                                 \
    errno,                                                    \
    strerror(errno)                                           \
  )

#define warning_print( txt, ... )                               \
  fprintf(                                                      \
    stderr,                                                     \
    "Warning: " txt ", at line %d in file %s, errno: %d, %s\n", \
    ##__VA_ARGS__,                                              \
    __LINE__,                                                   \
    __FILE__,                                                   \
    errno,                                                      \
    strerror(errno)                                             \
  )  

#define MIXLINK_DEF_SUFFIXES \
  X(init)                  \
  X(deinit)                \
  X(loop)

#define MIXLINK_IO_SUFFIXES \
  X(io)  

#define MIXLINK_GEN_DEF_MODULES_DECL(prefix, name, suffix, type) \
  int8_t mixlink_##prefix##_##name##_##suffix( \
    const type * self                          \
  );

#define MIXLINK_GEN_IO_MODULES_DECL(prefix, name, suffix, type) \
  int8_t mixlink_##prefix##_##name##_##suffix( \
    mixlink_buf8_t * data,                     \
    enum direction dir,                        \
    const type * self                          \
  );

#define MIXLINK_GEN_DEF_MODULES_IMPL( prefix, name, suffix, type ) \
  int8_t                                         \
  mixlink_##prefix##_##name##_##suffix(          \
    const type * self                            \
  ){                                             \
    if( !self ){                                 \
      errno = EINVAL;                            \
      return -1;                                 \
    }                                            \
    return mixlink_mod_exec(                     \
      NULL,                                      \
      &self->name.suffix                         \
    );                                           \
  }

#define MIXLINK_GEN_IO_MODULES_IMPL( prefix, name, suffix, type ) \
  int8_t                                         \
  mixlink_##prefix##_##name##_##suffix(          \
    mixlink_buf8_t * data,                       \
    enum direction dir,                          \
    const type * self                            \
  ){                                             \
    if( !self ){                                 \
      errno = EINVAL;                            \
      return -1;                                 \
    }                                            \
    mixlink_abi_default_io_t abi = {             \
      .data = data                               \
    };                                           \
    return mixlink_mod_exec_io(                  \
      (void*) &abi,                              \
      dir,                                       \
      &self->name                                \
    );                                           \
  }


/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Tries to load the callback interface for a module indicated in `path`. 
 * 
 * @param[in] path The path to the desired module, e.g., libcobs.so
 * @param[in] section Indicates the stack module to load.
 * @param[out] module The structure that will be filled with the loaded callback functions.
 *
 * @return Upon success, it fills the `module` struct, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_load( 
  const char * path,
  const char * iface_prefix,
  mixlink_module_t * module
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Unloads a module from the program.
 * 
 * @param[out] module The structure that will be filled with the unloaded callback functions.
 *
 * @return Upon success, it fills the `module` struct, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_unload( 
  mixlink_module_t * module
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief To simplify the process of executing a interface function with a module. 
 * 
 * @param[in] arg The arguments packet into a struct, so the module can open it and view its content.
 * @param[in] iface Interface to interact with the module.
 *
 * @return The return value is dependent on the module return value.
 *         However, if the iface is NULL or a symbol was not found, the function returns -1 and errno is set.
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_exec(
  void * arg,
  const mixlink_callback_t * cb
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the correct pipeline dynamic function from the loaded module, if present on the stack. 
 * 
 * @param[in,out] abi The Input/Output ABI for mixlink modules.
 * @param[in] dir Indication of the flow of information.
 * @param[in] mod The module to execute.
 *
 * @return Upon success, it applies something to `data` and updates with new length, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_exec_io(
  void * abi,
  const enum direction dir, 
  const mixlink_module_t * mod
);

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
}
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End of file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
