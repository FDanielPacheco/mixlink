/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      mixlink.h
 * 
 * @version   1.0
 *
 * @date      09-10-2025
 *
 * @brief     Headers of the top level of a Linux-based L2 stack for protocol-aware serial-based wireless communications. 
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef MIXLINK_H
#define MIXLINK_H 

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <linux/limits.h>
#include <stdint.h>
#include <stdbool.h>

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
extern "C" {        
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

//!< Suport the callback functions and if they are enabled
typedef struct{
  int8_t (* fn)( void * );
  bool enabled;
} mixlink_callback_t;

//!< Callback interfaces for each external module 
typedef struct{
  void * handle;
  mixlink_callback_t setup;
  mixlink_callback_t loop;
  mixlink_callback_t rx;
  mixlink_callback_t tx;
  mixlink_callback_t close;
} mixlink_module_t;

//!< Device identification if it is a NIC it is only represented by its name. If it is a serial port it uses the 3 parameters.
typedef struct{
  char name[NAME_MAX];                                                         //!< Device name e.g., eth0  
  char device[NAME_MAX];                                                       //!< Device path e.g., /dev/ttyUSB0
  char driver[NAME_MAX];                                                       //!< Device driver e.g., libe22900t22s.so
} mixlink_param_dev_t;

//!< Controller application, dynamic libraries path.
typedef struct{
  struct{
    struct{
      mixlink_param_dev_t tx;                                                  //!< Indicate a simplex path from the translator pipeline to the serial port output specified only, note it can not be the same as rx
      mixlink_param_dev_t rx;                                                  //!< Indicate a simplex path from the translator pipeline to the serial port input specified only, note it can not be the same as tx
    } pair;
    mixlink_param_dev_t def;                                                   //!< Indicate a duplex path from the translator pipeline to the serial port specified
  } dev;

  char qos[NAME_MAX];                                                          //!< The Quality of Service (QoS) dynamic library path, e.g., libslidewindow.so
  char framer[NAME_MAX];                                                       //!< The Framer L1 dynamic library path, e.g., libcobs.so, it can be the same the translator
} mixlink_param_controller_t;

//!< Translator application, dynamic libraries path.
typedef struct{
  struct{
    struct{
      mixlink_param_dev_t tx;                                                  //!< Indicate a simplex path from the controller pipeline to the NIC specified, note it can not be the same as rx
      mixlink_param_dev_t rx;                                                  //!< Indicate a simplex path from the controller pipeline to the NIC specified, note it can not be the same as tx
    } pair;
    mixlink_param_dev_t def;                                                   //!< Indicate a duplex path from the controller pipeline to the NIC specified
  } nic;

  char opt[NAME_MAX];                                                          //!< The overhead Optimizer (opt) dynamic library path, e.g., libtcpopt.so
  char framer[NAME_MAX];                                                       //!< The Framer L2 dynamic library path, e.g., libcbos.so, it can be the same the controller
} mixlink_param_translator_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Lookup tables
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

typedef enum {
  MIXLINK_STACK_SECTION_TRANSLATOR_OPT = 0,
  MIXLINK_STACK_SECTION_TRANSLATOR_FRAMER,
  MIXLINK_STACK_SECTION_CONTROLLER_SEGM,
  MIXLINK_STACK_SECTION_CONTROLLER_QOS,
  MIXLINK_STACK_SECTION_CONTROLLER_FRAMER,
  MIXLINK_STACK_SECTION_CONTROLLER_DRIVER,
} mixlink_stack_sections_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Macros
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#define error_print( txt, ... )                               \
  fprintf(                                                    \
    stderr,                                                   \
    "Error: " txt ",at line %d in file %s\nErrno: %d, %s\n",  \
    ##__VA_ARGS__,                                            \
    __LINE__,                                                 \
    __FILE__,                                                 \
    errno,                                                    \
    strerror(errno)                                           \
  )

#define warning_print( txt, ... )                               \
  fprintf(                                                      \
    stderr,                                                     \
    "Warning: " txt ",at line %d in file %s\nErrno: %d, %s\n",  \
    ##__VA_ARGS__,                                              \
    __LINE__,                                                   \
    __FILE__,                                                   \
    errno,                                                      \
    strerror(errno)                                             \
  )  

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Tries to load the callback interface for a module indicated in `path`. 
 * 
 * @param[in] path The path to the desired module, e.g., libcobs.so
 * @param[in] section Indicates the stack module to load.
 * @param[out] module The structure that will be filled with the loaded callback functions.
 *
 * @return Upon success, it fills the `module` struct, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_load( 
  const char * path,
  const mixlink_stack_sections_t section,
  mixlink_module_t * module
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Unloads a module from the program.
 * 
 * @param[out] module The structure that will be filled with the unloaded callback functions.
 *
 * @return Upon success, it fills the `module` struct, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_unload( 
  mixlink_module_t * module
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief To simplify the process of executing a interface function with a module. 
 * 
 * @param[in] arg The arguments packet into a struct, so the module can open it and view its content.
 * @param[in] iface Interface to interact with the module.
 *
 * @return The return value is dependent on the module return value.
 *         However, if the iface is NULL or a symbol was not found, the function returns -1 and errno is set.
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_mod_exec(
  void * arg,
  mixlink_callback_t * cb
);


/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
}
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End of file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
