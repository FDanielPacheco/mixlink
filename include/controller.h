/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      controller.h
 * 
 * @version   1.0
 *
 * @date      09-10-2025
 *
 * @brief     Headers for the interfaces with the controller
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef CONTROLLER_H
#define CONTROLLER_H 

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <xcserial.h>

#include "mixlink.h"

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
extern "C" {        
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

//!< Support to indicate the serial port object, and if the port is in use.
struct serial_handler{
  serial_t sr;
  mixlink_module_t driver;
  bool enabled;
};

typedef struct{
  struct serial_handler def;
  struct{
    struct serial_handler rx;
    struct serial_handler tx;
  } pair;

  mixlink_module_t segm;
  mixlink_module_t qos;
  mixlink_module_t framer;
} mixlink_controller_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Initializes the controller based on the parameters specified by `mixlink_param_controller_t` and upon success fills the structure `mixlink_controller_t`. 
 * 
 * @param[in] param The parameters that indicate the controller stack configuration.
 * @param[out] controller The controller object that will be filled with the necessary information after initialize the Controller stack.
 *
 * @return Upon success, it fills the `controller` struct, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_controller_init( 
  const mixlink_param_controller_t param,
  mixlink_controller_t * controller
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Closes all serial ports associated with the controller argument. 
 * 
 * @param[in] controller The controller object that will be closed.
 *
 * @return Upon success it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_controller_close(
  mixlink_controller_t * controller
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Sends a sequence of bytes to the opened serial port designed to transmit. 
 * 
 * @param[in] controller The controller object that will be used.
 * @param[in] data The sequence of bytes to send through the serial port.
 * @param[in] len The number of bytes on `data`.
 * 
 * @return Upon success, the function returns the number of bytes wrote to the NIC buffer. \n
 *         On error, the function returns 0 and sets `errno` to indicate the error.
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
size_t mixlink_controller_write(
  mixlink_controller_t * controller,
  mixlink_buf8_t * data
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Reads a specified number of bytes from the serial port buffer and writes to a buffer passed as argument.
 * 
 * @param[out] buf The buffer to store the received data. Must be large enough to hold the expected data, taking into account the `offset`.
 * @param[in] size The total size of the buffer `buf`. This is used to prevent buffer overflows.
 * @param[in] offset The offset within the buffer `buf` where the received data should be stored. This allows for appending to existing content in the buffer.
 * @param[in] total The maximum number of bytes to read from the serial port.
 * @param[in] controller The controller object that will be used.
 * 
 * @return Upon success, the function returns the number of bytes wrote to the NIC buffer. \n
 *         On error, the function returns 0 and sets `errno` to indicate the error.
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
size_t mixlink_controller_read( 
  mixlink_buf8_t * data,
  const size_t offset,
  const size_t total,
  mixlink_controller_t * controller
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the dynamic function to segment or build information to be sent or received through the serial port. 
 * 
 * @param[in,out] data The data coming from or to the serial port, to be managed by the module.
 * @param[out] index If the `data` is segmented then this variable is used to indicate the offset of each segment.
 * @param[in] dir Indication of the flow of information.
 * @param[in] controller The controller object that will be closed.
 *
 * @return Upon success, the user should return 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_controller_segm_io( 
  mixlink_buf8_t * data,
  mixlink_buf16_t * index,
  const enum direction dir, 
  mixlink_controller_t * controller
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the dynamic function to segment or build information to be sent or received through the serial port. 
 * 
 * @param[in,out] data The data coming from or to the serial port, to be managed by the module.
 * @param[in] dir Indication of the flow of information.
 * @param[in] controller The controller object that will be closed.
 *
 * @return Upon success, the user should return 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_controller_qos_io(
  mixlink_buf8_t * data,
  const enum direction dir, 
  mixlink_controller_t * controller
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the dynamic function to segment or build information to be sent or received through the serial port. 
 * 
 * @param[in,out] data The data coming from or to the serial port, to be managed by the module.
 * @param[in] dir Indication of the flow of information.
 * @param[in] controller The controller object that will be closed.
 *
 * @return Upon success, the user should return 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_controller_framer_io(
  mixlink_buf8_t * data,
  const enum direction dir, 
  mixlink_controller_t * controller
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the dynamic function to segment or build information to be sent or received through the serial port. 
 * 
 * @param[in,out] data The data coming from or to the serial port, to be managed by the module.
 * @param[in] dir Indication of the flow of information.
 * @param[in] controller The controller object that will be closed.
 *
 * @return Upon success, the user should return 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_controller_driver_io(
  mixlink_buf8_t * data,
  const enum direction dir, 
  mixlink_controller_t * controller
);

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
}
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End of file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
