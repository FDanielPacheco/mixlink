/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      translator.h
 * 
 * @version   1.0
 *
 * @date      09-10-2025
 *
 * @brief     Headers for the interfaces with the translator
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef TRANSLATOR_H
#define TRANSLATOR_H 

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#include "mixlink.h"

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
extern "C" {        
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

//!< Support to indicate the Network Interface Card (NIC)  
struct nic_handler{
  char name[NAME_MAX];
  int  soc;
  bool enabled;
};

//!< Translator object that every function require 
typedef struct{
  struct nic_handler def;
  struct{
    struct nic_handler rx;
    struct nic_handler tx;
  } pair;

  mixlink_module_t opt;
  mixlink_module_t framer;
} mixlink_translator_t;

//!< Data structures for each callback associated with the translator
typedef struct{
  uint8_t * data;
  ssize_t * len;
  const ssize_t size;
} mixlink_translator_cb_t;

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Enumerations
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

enum direction{
  MIXLINK_DIRECTION_FROM_NIC = 0,
  MIXLINK_DIRECTION_TO_NIC,
};

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Initializes the translator based on the parameters specified by `mixlink_param_translator_t` and upon success fills the structure `mixlink_translator_t`. 
 * 
 * @param[in] param The parameters that indicate the translator stack configuration.
 * @param[out] translator The translator object that will be filled with the necessary information after initialize the Translator stack.
 *
 * @return Upon success, it fills the `trans` struct, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 *  - `EINVAL`: Invalid argument \n
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_translator_init( 
  const mixlink_param_translator_t param,
  mixlink_translator_t * translator           
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Closes all NICs associated with the translator argument. 
 * 
 * @param[in] translator The translator object that will be closed.
 *
 * @return Upon success it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_translator_close(
  mixlink_translator_t * translator
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Sends a sequence of bytes to the opened NIC. 
 * 
 * @param[out] translator The translator object that will be closed.
 * @param[in] data The sequence of bytes to send through the NIC.
 * @param[in] len The number of bytes on `data`.
 * 
 * @return Upon success, the function returns the number of bytes wrote to the NIC buffer. \n
 *         On error, the function returns 0 and sets `errno` to indicate the error.
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
ssize_t mixlink_translator_write(
  const mixlink_translator_t * translator,
  const uint8_t * data, 
  const ssize_t len
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Reads a specified number of bytes from the NIC buffer and writes to a buffer passed as argument.
 * 
 * @param[out] buf The buffer to store the received data. Must be large enough to hold the expected data, taking into account the `offset`.
 * @param[in] size The total size of the buffer `buf`. This is used to prevent buffer overflows.
 * @param[in] offset The offset within the buffer `buf` where the received data should be stored. This allows for appending to existing content in the buffer.
 * @param[in] length The maximum number of bytes to read from the NIC.
 * @param[in] len The number of bytes on `data`.
 * 
 * @return Upon success, the function returns the number of bytes wrote to the NIC buffer. \n
 *         On error, the function returns 0 and sets `errno` to indicate the error.
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
ssize_t mixlink_translator_read( 
  uint8_t * buf,
  const ssize_t size,
  const ssize_t offset,
  const ssize_t len,
  const mixlink_translator_t * translator
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the dynamic function to optimize the sent or received frame. 
 * 
 * @param data The sequence of bytes that represent a network frame from the NIC or to the NIC.
 * @param len The number of bytes on `data`.
 * @param[in] size The number of bytes on `data`.
 * @param[in] dir Indication of the flow of information.
 * @param[in] translator The translator object that will be closed.
 *
 * @return Upon success, it applies something to `data` and updates with new length, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_translator_optimizer_io(
  uint8_t * data, 
  ssize_t * len,
  const ssize_t size,
  const enum direction dir, 
  const mixlink_translator_t * translator
);

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Calls the dynamic function to apply or remove framming to the sent or received frame. 
 * 
 * @param data The sequence of bytes that represent a network frame from the NIC or to the NIC.
 * @param len The number of bytes on `data`.
 * @param[in] size The number of bytes on `data`.
 * @param[in] dir Indication of the flow of information.
 * @param[in] translator The translator object that will be closed.
 *
 * @return Upon success, it applies something to `data` and updates with new length, and it returns 0. \n 
 *         Otherwise -1 is returned and errno is set. 
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t mixlink_translator_framer_io(
  uint8_t * data, 
  ssize_t * len,
  const ssize_t size,
  const enum direction dir, 
  const mixlink_translator_t * translator
);

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * External C++ extern macro
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifdef __cplusplus  
}
#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End of file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
